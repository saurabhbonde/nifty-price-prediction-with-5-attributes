# -*- coding: utf-8 -*-
"""nifty with 5 attributes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FPeqABZGXGxx7pY-rcg5KwL1BKnEsHTT

# Recurrent Neural Network

## Part 1 - Data Preprocessing

### Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""### Importing the training set"""

dataset_train = pd.read_csv("total_data.csv")
training_set = dataset_train.iloc[:,1:6].values
print(training_set.shape)

"""### Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
training_set_scaled = sc.fit_transform(training_set)
print(training_set_scaled.shape)

"""### Creating a data structure with 60 timesteps and 1 output"""

X_train = []
y_train = []
time_step = 30
for i in range(time_step, len(training_set_scaled)):
  X_train.append(training_set_scaled[i-time_step : i, :])
  y_train.append(training_set_scaled[i,0])
X_train, y_train = np.array(X_train), np.array(y_train)
print(X_train.shape)

"""### Reshaping"""

X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 5))

"""## Part 2 - Building and Training the RNN

### Importing the Keras libraries and packages
"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

"""### Initialising the RNN"""

regressor = Sequential()

"""### Adding the first LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units= 50, return_sequences=True, input_shape =(X_train.shape[1], 5) ))
regressor.add(Dropout(0.2))

"""### Adding a second LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units= 50, return_sequences=True))
regressor.add(Dropout(0.2))

"""### Adding a third LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units= 50, return_sequences=True))
regressor.add(Dropout(0.2))

"""### Adding a fourth LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units= 50, return_sequences=False))
regressor.add(Dropout(0.2))

"""### Adding the output layer"""

regressor.add(Dense(units=5))

"""### Compiling the RNN"""

regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""### Fitting the RNN to the Training set"""

regressor.fit(X_train, y_train, epochs = 100, batch_size= 32)

"""## Part 3 - Making the predictions """

real_stock_price = training_set[(len(training_set))-time_step:,0:5]
real_stock_price = np.array(real_stock_price)
print(real_stock_price.shape)

dataset_total = training_set
inputs = dataset_total[len(dataset_total) - time_step:]
inputs = inputs.reshape(-1,5)
inputs = sc.transform(inputs)
print(inputs.shape)

X_test = []
for i in range(time_step, time_step+1):
    X_test.append(inputs[i-time_step:i, :])
X_test = np.array(X_test)
print(X_test.shape)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 5))
print(X_test.shape)

predicted_stock_price = regressor.predict(X_test)
print(predicted_stock_price)
predicted_stock_price = np.array(predicted_stock_price)
print(predicted_stock_price.shape)
predicted_stock_price.reshape(1,5)

r = sc.inverse_transform(predicted_stock_price)
r = np.array(r)

print('    open','          high','       low','     close','     volume')
print(r)